from django.shortcuts import render
from django.views import View
from accounts.models import CustomUser
from django.http import JsonResponse
from django import forms
from accounts.forms import CustomUserCreationForm
from .models import School, Classroom, Test, Question, Option, UserTestSubmission
from django.urls import reverse
from django.http import HttpResponse
from django.template.loader import render_to_string
from django.contrib.auth import login
from django.db.models import Max






from django.contrib.auth.hashers import check_password
from .forms import SchoolCreateForm, ClassroomCreateForm, TestCreateForm, QuestionCreateForm, OptionCreateForm, TestSubmissionForm
from .owner import OwnerDeleteView
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import get_object_or_404, redirect





class ProfilePageView(View):


    template_name = 'main/test.html'

    def get(self, request):




        return render(request, self.template_name, {
            'users': CustomUser.objects.all(),
            'schools': School.objects.all(),
            'classrooms': Classroom.objects.all(),
            'tests': Test.objects.all(),
            'questions': Question.objects.all(),
            'options': Option.objects.all(),
            'school_form': SchoolCreateForm(),
            'test_form': TestCreateForm(),
            'question_form': QuestionCreateForm(),
            'option_form': OptionCreateForm(),
            'classroom_form': ClassroomCreateForm(),
            'signup_form': CustomUserCreationForm()
        })

    def post(self, request):
        school_name = request.POST.get('school_name')
        school_password = request.POST.get('school_password')
        classroom_name = request.POST.get('classroom_name')
        classroom_password = request.POST.get('classroom_password')
        test_submission_form = TestSubmissionForm()

        signup_form = CustomUserCreationForm(request.POST)  # Pass request to the form
        if signup_form.is_valid():
            user = signup_form.save()
            login(request, user)


        return render(request, self.template_name, {
            'users': CustomUser.objects.all(),
            'schools': School.objects.all(),
            'classrooms': Classroom.objects.all(),
            'tests': Test.objects.all(),
            'questions': Question.objects.all(),
            'options': Option.objects.all(),
            'school_form': SchoolCreateForm(),
            'test_form': TestCreateForm(),
            'question_form': QuestionCreateForm(),
            'option_form': OptionCreateForm(),
            'classroom_form': ClassroomCreateForm(),
            'school_name': school_name,
            'school_password': school_password,
            'classroom_name': classroom_name,
            'classroom_password': classroom_password,
            'test_submission_form': test_submission_form,
            'signup_form': signup_form,
        })





class AccountDeleteView(OwnerDeleteView):
    # Using the OwnerDeleteView I got from dj4e to delete accounts.

    model = CustomUser
    template_name = 'main/test.html'

    def get_success_url(self):
        current_user_id = self.request.user.id
        return reverse('main:profile', kwargs={'user_id': current_user_id})



class SchoolCreateView(LoginRequiredMixin, View):
    def post(self, request):
        form = SchoolCreateForm(request.POST, request.FILES or None)
        if form.is_valid():
            school = form.save(commit=False)
            school.save()
            return JsonResponse({'success': True})
        else:
            return JsonResponse({'success': False, 'errors': form.errors}, status=400)



class ClassroomCreateView(LoginRequiredMixin, View):
    def post(self, request, pk):
        form = ClassroomCreateForm(request.POST, request.FILES or None)
        school = get_object_or_404(School, pk=pk)
        if form.is_valid():
            classroom = form.save(commit=False)
            classroom.school = school
            classroom.save()
            response_data = {'success': True, 'school_pk': school.pk}
            return JsonResponse(response_data)
        else:
            response_data = {'success': False, 'errors': form.errors, 'school_pk': school.pk}
            return JsonResponse(response_data, status=400)


class TestCreateView(LoginRequiredMixin, View):
    def post(self, request, pk):
        form = TestCreateForm(request.POST, request.FILES or None)
        classroom = get_object_or_404(Classroom, pk=pk)
        if form.is_valid():
            test = form.save(commit=False)
            test.classroom = classroom
            test.save()
            response_data = {'success': True, 'classroom_pk': classroom.pk}
            return JsonResponse(response_data)
        else:
            response_data = {'success': False, 'errors': form.errors, 'classroom_pk': classroom.pk}
            return JsonResponse(response_data, status=400)



class QuestionCreateView(LoginRequiredMixin, View):
    def post(self, request, pk=None):
        form = QuestionCreateForm(request.POST, request.FILES or None)
        test = get_object_or_404(Test, pk=pk)
        if form.is_valid():
            question = form.save(commit=False)
            question.test = test
            question.save()
            response_data = {'success': True, 'test_pk': test.pk}
            return JsonResponse(response_data)
        else:
            response_data = {'success': False, 'errors': form.errors, 'test_pk': test.pk}
            return JsonResponse(response_data, status=400)



class OptionCreateView(LoginRequiredMixin, View):
    def post(self, request, pk=None):
        form = OptionCreateForm(request.POST, request.FILES or None)
        question = get_object_or_404(Question, pk=pk)
        if form.is_valid():
            option = form.save(commit=False)
            option.question = question
            option.save()
            response_data = {'success': True, 'question_pk': question.pk}
            return JsonResponse(response_data)
        else:
            response_data = {'success': False, 'errors': form.errors, 'question_pk': question.pk}
            return JsonResponse(response_data, status=400)



def school_stream_file(request, pk):

    school = get_object_or_404(School, id=pk)
    response = HttpResponse()
    response['Content-Type'] = school.school_content_type
    response['Content-Length'] = len(school.school_picture)
    response.write(school.school_picture)
    return response


def classroom_stream_file(request, pk):

    classroom = get_object_or_404(Classroom, id=pk)
    response = HttpResponse()
    response['Content-Type'] = classroom.classroom_content_type
    response['Content-Length'] = len(classroom.classroom_picture)
    response.write(classroom.classroom_picture)
    return response


def test_stream_file(request, pk):

    test = get_object_or_404(Test, id=pk)
    response = HttpResponse()
    response['Content-Type'] = test.test_content_type
    response['Content-Length'] = len(test.test_picture)
    response.write(test.test_picture)
    return response


def question_stream_file(request, pk):

    question = get_object_or_404(Question, id=pk)
    response = HttpResponse()
    response['Content-Type'] = question.question_content_type
    response['Content-Length'] = len(question.question_picture)
    response.write(question.question_picture)
    return response


def option_stream_file(request, pk):

    option = get_object_or_404(Option, id=pk)
    response = HttpResponse()
    response['Content-Type'] = option.option_content_type
    response['Content-Length'] = len(option.option_picture)
    response.write(option.option_picture)
    return response


class TestAnswerView(LoginRequiredMixin, View):

    def post(self, request, pk):
        form = TestSubmissionForm(request.POST)

        if form.is_valid():
            submission = form.save(commit=False)
            submission.user = request.user
            submission.test_id = pk

            score = 0
            if submission.selected_option.is_correct:
                score += 1
                submission.score = score
                message = 'Correct answer!'
            else:
                message = 'Wrong answer'


            submission.save()



            response_data = {'success': True, 'message': message}
            return JsonResponse(response_data)
        else:
            response_data = {'success': False, 'errors': form.errors}
            return JsonResponse(response_data, status=400)